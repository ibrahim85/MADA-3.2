stages:
  - build
  - test
  - release
variables:
  CGO_ENABLED: "0"
  GOOS: linux
  GO_BUILD_OUTPUT_NAME: $CI_PROJECT_NAME
  GO_BUILD_OPTIONS: -ldflags "-s" -a -installsuffix cgo -o $GO_BUILD_OUTPUT_NAME

before_script:
  # Enable cloning of internal GitLab repositories
  - git config --global url."https://gitlab-ci-token:$CI_BUILD_TOKEN@gitlab.qntfy.com/".insteadOf "https://gitlab.qntfy.com/"
  # Setup GoLang Variables
  - export GOPATH=/builds/golang
  - export GOBIN=$GOPATH/bin
  # Make the GoLang project directory a link to $CI_PROJECT_DIR (i.e. the current directory)
  - mkdir -p $GOPATH/src/gitlab.qntfy.com/analytics/ $GOBIN
  - ln -s $CI_PROJECT_DIR $GOPATH/src/gitlab.qntfy.com/analytics/$CI_PROJECT_NAME
  # Make a directory to store the artifacts.  Required by GitLab to be within the $CI_PROJECT_DIR
  - mkdir -p $CI_PROJECT_DIR/artifacts
  # Download the dependencies
  - go get -t -v

build:go-1.7:
  image: golang:1.7
  stage: build
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts/$GO_BUILD_OUTPUT_NAME
  script:
    - go build $GO_BUILD_OPTIONS .
    - cp $GOPATH/bin/$GO_BUILD_OUTPUT_NAME artifacts

test:go-1.7:
  image: golang:1.7
  stage: test
  script:
    - ls -lva artifacts
    - go test -v --cover ./...

release:
  image: golang:1.7
  stage: release
  only:
   - tags
  artifacts:
    paths:
      - artifacts/$GO_BUILD_OUTPUT_NAME
  script:
    - go build $GO_BUILD_OPTIONS .
    - cp $GOPATH/bin/$GO_BUILD_OUTPUT_NAME artifacts
